105. Construct Binary Tree from Preorder and Inorder Traversal
Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
   
 第一次解题方法：
 先序遍历：先访问父节点，再访问左节点，最后访问右节点。
 中序遍历：先访问左节点，再访问父节点，最后访问右节点。
 遍历先序数组，在中序数组中找到对应值，左边的为左子树，右边的为右子树。
 使用梯归。
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return construct(inorder, preorder, 0, inorder.size()-1, 0);
    }
    TreeNode* construct(vector<int> &in, vector<int> &pre, int l, int r, int s)
    {
        if(pre.size() == s || l > r) return nullptr;
        TreeNode *node = new TreeNode(pre[s]);
        int i;
        for(i=l; i<=r; ++i)
        {
            if(pre[s] == in[i]) break;
        }
        node->left = construct(in, pre, l, i-1, s+1);
        node->right = construct(in, pre, i+1, r, s+i-l+1);
        return node;
    }
};
时间复杂度O(nm)，空间复杂度O(n)。
每次都要遍历查找中序数组中的对应值位置，使用map记录下每个值在中序数组中的位置。
class Solution {
public:
    map<int, int> m_map;
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        for(int i=0; i<inorder.size(); ++i) m_map.insert(pair<int, int>(inorder[i], i));
        return construct(inorder, preorder, 0, inorder.size()-1, 0);
    }
    TreeNode* construct(vector<int> &in, vector<int> &pre, int l, int r, int s)
    {
        if(pre.size() == s || l > r) return nullptr;
        TreeNode *node = new TreeNode(pre[s]);
        int i = m_map.at(pre[s]);
        node->left = construct(in, pre, l, i-1, s+1);
        node->right = construct(in, pre, i+1, r, s+i-l+1);
        return node;
    }
};
时间复杂度O(n)，空间复杂度O(n)。
