Given a binary tree, determine if it is height-balanced.

思路：
动态规划+递归
一个节点的深度等于它的左子树或者右子树最大深度+1。（动态规划）
递归求解每个节点的深度。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if(nodeDepth(root) == -1) return false;
        else return true;
    }
    int nodeDepth(TreeNode *node)
    {
        if(node == nullptr) return 0;
        int left = nodeDepth(node->left), right = nodeDepth(node->right);
        if(left == -1 || right == -1) return -1;
        if(left - right > 1 || left - right < -1) return -1;
        else return (left > right)? left+1 : right+1;
    }
};

时间复杂度：O(n)
空间复杂度：O(n)
